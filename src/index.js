import './pages/index.css';

// В этих файлах делаются запросы к API, проверка localStorage, создание экземпляров классов, необходимых для первоначальной отрисовки страницы, добавление обработчиков.

// Общие рекомендации
// Именование файлов. Файлы классов именуются в нотации CamelCase с большой буквы. Остальные файлы, например вспомогательные функции или константы, именуйте в нотации kebab-case.
// Экспорт. При экспорте классов, экспортируйте именно класс, а не экземпляр этого класса. Вот так хорошо:
// export default NewsCardList;
// `
// А вот так не очень:
// const сardList = new NewsCardList(options);
// export default сardList;
// `
// Создание переменных. Для именования пользуйтесь правилами:
// camelCase для параметров, функций, методов и переменных;
// UPPER_SNAKE_CASE для констант в папке constants;
// используйте существительные для имён переменных;
// используйте существительные во множественном числе для массивов и псевдомассивов;
// используйте существительные с заглавной буквы для имён классов;
// используйте const для переменных, которые никогда не переприсваиваются;
// не используйте транслитерацию, называйте переменные английскими терминами;
// Если хотите пятёрку
// В критериях JavaScript-кода «на пятёрку» есть пункт «создание базового компонента» — BaseComponent. Дело в том, что многие интерфейсные классы принимают обработчики событий, которые добавляют элементам интерфейса. Чтобы эта функциональность не дублировалась, имеет смысл выделить её в отдельный класс. Тогда интерфейсные классы смогут его расширять и получать функциональность автоматически.
// У класса BaseComponent должен быть метод constructor. Он принимает на вход массив обработчиков событий и вызывает приватный метод _setHandlers. Этот метод добавляет обработчики конкретным элементам.
// Вместо заключения
// Описанные в этом разделе классы и их методы — наше предложение. Но мы не устанем повторять: организация кода — задача творческая. Поэтому считайте предложенную структуру отправной точкой. В процессе работы вам может захотеться добавить какие-то свои классы и методы. Мы не запрещаем этого делать, а на код-ревью расскажем, удачно ваше решение или нет.
